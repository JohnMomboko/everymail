"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const vitest_1=require("vitest"),index_1=__importDefault(require("./index"));(0,vitest_1.describe)("validateEmail",()=>{(0,vitest_1.it)("should validate a correct email with an allowed domain",()=>__awaiter(void 0,void 0,void 0,(function*(){const result=yield(0,index_1.default)("user@example.com",{allowedDomains:["example.com"]});(0,vitest_1.expect)(result).toBe("The email address is valid.")}))),(0,vitest_1.it)("should reject an email with a disallowed domain",()=>__awaiter(void 0,void 0,void 0,(function*(){yield(0,vitest_1.expect)((0,index_1.default)("user@spam.com",{disallowedDomains:["spam.com"]})).rejects.toBe("The domain of this email is not authorized.")}))),(0,vitest_1.it)("should reject an email with a domain not in the allowed list",()=>__awaiter(void 0,void 0,void 0,(function*(){yield(0,vitest_1.expect)((0,index_1.default)("user@unknown.com",{allowedDomains:["example.com"]})).rejects.toBe("The domain of this email is not authorized.")}))),(0,vitest_1.it)("should validate an email when no domain restrictions are provided",()=>__awaiter(void 0,void 0,void 0,(function*(){const result=yield(0,index_1.default)("user@anydomain.com");(0,vitest_1.expect)(result).toBe("The email address is valid.")}))),(0,vitest_1.it)("should reject an invalid email format",()=>__awaiter(void 0,void 0,void 0,(function*(){yield(0,vitest_1.expect)((0,index_1.default)("invalid-email")).rejects.toBe("The email address is invalid.")})))});